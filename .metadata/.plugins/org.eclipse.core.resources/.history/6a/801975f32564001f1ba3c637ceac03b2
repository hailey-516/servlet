<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Custom Action Tag - Core</title>
</head>
<body>
	<h1>JSTL Core Library</h1>
	
	<h3>1. 변수</h3>
	<pre>
		* 변수 선언과 동시에 초기화 &lt;c:set var="변수명" value="값" [scope="저장객체"]&gt;
		- 변수 선언하고 초기화까지의 기능을 제공
		- 해당 변수의 저장된 값을 어떤 scope에 setAttribute를 통해서 담아둘지 결정
		=> c:set으로 선언한 변수는 반드시 EL로 접근해야 함!
	</pre>
	
	<%-- num1 이라는 변수에 10이라는 값을 저장 --%>
	<c:set var="num1" value="10"/> <!-- pageContext.setAttribute("num1", 10) -->
	
	<%-- request 영역에 num2라는 변수에 20이라는 값을 저장 --%>
	<c:set var="num2" value="20" scope="request"/>
	
	<p>num1 : ${ num1 } </p>
	<p>num2 : ${ num2 }</p>
	
	<%-- num1과 num2의 합을 저장한 addNum이라는 변수를 session 영역에 저장 --%>
	<c:set var="addNum" value="${ num1_+ num2 }" scope="session"/>
	
	<p>addNum : ${ addNum }</p>
	
	<%-- value 속성 대신 시작태그와 종료태그 사이에 초기값 지정 가능 --%>
	<c:set var="result">
		9999
	</c:set>
	
	<p>${ result }</p>
	
	<c:set var="result" value="7777" scope="request"/>
	<hr>
	
	<pre>
		* 변수 삭제 (c:remove var="삭제할 변수명" [scope="삭제하고자하는 영역"])
			- 해당 scope 영역에 저장되어 있는 변수를 찾아 제거하는 태그
			=> 해당 scope에 .removeAttribute() 를 사용하여 제거하는 것과 동일하게 처리됨
	</pre>
	
	<%-- addNum 변수를 삭제 --%>
	<b>* 특정 scope 영역에서 제거</b>
	<p>addNum : ${ addNum }</p>
	<c:remove var="addNum" scope="session"/>
	
	<p> 제거 후 addNum : ${ addNum }</p>


	<b>* 모든 scope에서 제거</b>
	
	<p> page scope 에 저장된 result : ${ pageScope.result }</p>
	<p> request scope 에 저장된 result : ${ requestScope.result }</p>
	<c:remove var="result"/>
	
	<p>scope 속성 없이 제거 : ${ pageScope.result } / ${ requestScope.result }</p>
	
	<hr>
	
	<pre>
		* 변수(데이터) 출력 (c:out value="출력하고자 하는 값" [default="기본값"] [escapeXml="true|false"])
	</pre>
	
	<%-- addNum에 저장된 값을 출력 --%>
	<c:out value="${ addNum }" />
	<c:out value="${ addNum }" default="데이터 없음" />
	
	<%-- outData라는 변수에 "<b>강조태그!!!</b> 값을 저장 --%>
	<c:set var="outData" value="<b>강조태그!!!</b>" />
	<c:out value="${ outData }" /> <%-- excapeXml 속성이 true(기본값) -> 출력데이터에 태그가 포함되어 있는 경우 해석되지 않음 --%>
	<c:out value="${ outData }" escapeXml="false" />
	
	<hr>
	
	<h3>2. 조건문 - if (c:if test="조건식")</h3>
	<pre>
		- Java의 if문과 비슷한 역할을 하는 태그
		- 조건식은 test 속성에 작성 (EL구문을 사용하여 작성)
	</pre>
	
	<%-- num1이 num2보다 큰가? --%>
	
	<%-- JSTL로 선언된 변수는 접근 불가! (EL로만 접근 가능)
	<% if(num1 > num2) { %>
	<% } %>
	 --%>
	
	<c:if test="${ num1 > num2 }">
		num1이 num2보다 큽니다.
	</c:if>
	<c:if test="${ num1 lt num2 }">
		num1이 num2보다 작습니다.
	</c:if>
	 
	<c:set var="hi" value="안녕" />
	<%-- hi 변수에 저장된 값이 "안녕"일 경우 hihihi~ 출력
						  그렇지 않은 경우 byebye 출력
	 --%>
	 <c:if test="${ hi }">
	 	hihihi~
	 </c:if>
	
</body>
</html>